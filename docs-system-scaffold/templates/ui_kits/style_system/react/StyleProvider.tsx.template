/**
 * {{PROJECT_NAME}} - Unified Style Provider
 * 
 * This provider consolidates all styling approaches into a single tree:
 * 1. Injects CSS variables from design tokens
 * 2. Sets up theme context for CSS-in-JS libraries
 * 3. Manages dark/light mode preferences
 * 
 * IMPORTANT: This is the central styling provider and MUST wrap the application.
 * Never create additional styling providers or themes that might conflict.
 */

import React, { useEffect, useState, createContext, useContext, ReactNode } from 'react';
import designTokens from '../core/designTokens';

// Theme modes available in the application
type ThemeMode = 'light' | 'dark' | 'system';

// Theme context state
interface ThemeContextState {
  mode: ThemeMode;
  setMode: (mode: ThemeMode) => void;
  resolvedMode: 'light' | 'dark'; // The actual mode after resolving 'system'
}

// Create the theme context with default values
const ThemeContext = createContext<ThemeContextState>({
  mode: 'system',
  setMode: () => {},
  resolvedMode: 'light',
});

// StyleProvider props
interface StyleProviderProps {
  children: ReactNode;
  initialMode?: ThemeMode;
}

/**
 * Theme Provider Component
 * 
 * Manages theme state and preferences
 */
export const StyleProvider: React.FC<StyleProviderProps> = ({ 
  children, 
  initialMode = 'system' 
}) => {
  // State for theme mode
  const [mode, setMode] = useState<ThemeMode>(initialMode);
  
  // State for resolved mode (after system preference is determined)
  const [resolvedMode, setResolvedMode] = useState<'light' | 'dark'>('light');
  
  // State for CSS variables
  const [cssVariables, setCssVariables] = useState<string>('');
  
  // Initialize CSS variables on mount
  useEffect(() => {
    setCssVariables(designTokens.generateCssVariables());
  }, []);
  
  // Effect for handling system preference changes
  useEffect(() => {
    const updateResolvedMode = () => {
      if (mode === 'system') {
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        setResolvedMode(prefersDark ? 'dark' : 'light');
      } else {
        setResolvedMode(mode as 'light' | 'dark');
      }
    };
    
    updateResolvedMode();
    
    // Listen for changes in system preferences
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handler = () => {
      if (mode === 'system') {
        updateResolvedMode();
      }
    };
    
    // Add event listener
    if (mediaQuery.addEventListener) {
      mediaQuery.addEventListener('change', handler);
    } else {
      // Fallback for older browsers
      mediaQuery.addListener(handler);
    }
    
    // Clean up
    return () => {
      if (mediaQuery.removeEventListener) {
        mediaQuery.removeEventListener('change', handler);
      } else {
        // Fallback for older browsers
        mediaQuery.removeListener(handler);
      }
    };
  }, [mode]);
  
  // Apply theme class to document body
  useEffect(() => {
    if (typeof document !== 'undefined') {
      // Remove both classes first
      document.documentElement.classList.remove('light', 'dark');
      // Add the appropriate class
      document.documentElement.classList.add(resolvedMode);
    }
  }, [resolvedMode]);
  
  // Create theme context value
  const themeContextValue: ThemeContextState = {
    mode,
    setMode,
    resolvedMode,
  };
  
  return (
    <ThemeContext.Provider value={themeContextValue}>
      {/* Inject CSS variables */}
      {cssVariables && (
        <style id="{{PROJECT_KEY}}-design-tokens" dangerouslySetInnerHTML={{ __html: cssVariables }} />
      )}
      
      {/* Render children */}
      {children}
    </ThemeContext.Provider>
  );
};

/**
 * Hook for accessing the theme context
 */
export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a StyleProvider');
  }
  return context;
};

/**
 * Theme toggle component
 * 
 * A simple button that toggles between light and dark mode
 */
export const ThemeToggle: React.FC = () => {
  const { mode, setMode, resolvedMode } = useTheme();
  
  const toggleTheme = () => {
    if (mode === 'system') {
      setMode(resolvedMode === 'light' ? 'dark' : 'light');
    } else {
      setMode(mode === 'light' ? 'dark' : 'light');
    }
  };
  
  return (
    <button
      onClick={toggleTheme}
      aria-label={`Toggle to ${resolvedMode === 'light' ? 'dark' : 'light'} mode`}
      title={`Toggle to ${resolvedMode === 'light' ? 'dark' : 'light'} mode`}
      className="theme-toggle"
    >
      {resolvedMode === 'light' ? 'üåô' : '‚òÄÔ∏è'}
    </button>
  );
};

export default StyleProvider;